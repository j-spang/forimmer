{"version":3,"file":"forimmer.cjs.production.min.js","sources":["../src/use_store_state.ts","../src/store.ts"],"sourcesContent":["import { Store } from './store';\nimport * as React from 'react';\n\nexport function useStoreState<ST extends Store<any>, A = any>(\n  store: ST,\n  subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A]\n): [A];\n\nexport function useStoreState<ST extends Store<any>, A = any, B = any>(\n  store: ST,\n  subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B]\n): [A, B];\n\nexport function useStoreState<ST extends Store<any>, A = any, B = any, C = any>(\n  store: ST,\n  subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C]\n): [A, B, C];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any\n>(\n  store: ST,\n  subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D]\n): [A, B, C, D];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any,\n  E = any\n>(\n  store: ST,\n  subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E]\n): [A, B, C, D, E];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any,\n  E = any,\n  F = any\n>(\n  store: ST,\n  subsetProducer: (\n    state: ReturnType<ST['getCurrentState']>\n  ) => [A, B, C, D, E, F]\n): [A, B, C, D, E, F];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any,\n  E = any,\n  F = any,\n  G = any\n>(\n  store: ST,\n  subsetProducer: (\n    state: ReturnType<ST['getCurrentState']>\n  ) => [A, B, C, D, E, F, G]\n): [A, B, C, D, E, F, G];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any,\n  E = any,\n  F = any,\n  G = any,\n  H = any\n>(\n  store: ST,\n  subsetProducer: (\n    state: ReturnType<ST['getCurrentState']>\n  ) => [A, B, C, D, E, F, G, H]\n): [A, B, C, D, E, F, G, H];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any,\n  E = any,\n  F = any,\n  G = any,\n  H = any,\n  I = any\n>(\n  store: ST,\n  subsetProducer: (\n    state: ReturnType<ST['getCurrentState']>\n  ) => [A, B, C, D, E, F, G, H, I]\n): [A, B, C, D, E, F, G, H, I];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any,\n  E = any,\n  F = any,\n  G = any,\n  H = any,\n  I = any,\n  J = any\n>(\n  store: ST,\n  subsetProducer: (\n    state: ReturnType<ST['getCurrentState']>\n  ) => [A, B, C, D, E, F, G, H, I, J]\n): [A, B, C, D, E, F, G, H, I, J];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any,\n  E = any,\n  F = any,\n  G = any,\n  H = any,\n  I = any,\n  J = any,\n  K = any\n>(\n  store: ST,\n  subsetProducer: (\n    state: ReturnType<ST['getCurrentState']>\n  ) => [A, B, C, D, E, F, G, H, I, J, K]\n): [A, B, C, D, E, F, G, H, I, J, K];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any,\n  E = any,\n  F = any,\n  G = any,\n  H = any,\n  I = any,\n  J = any,\n  K = any,\n  L = any\n>(\n  store: ST,\n  subsetProducer: (\n    state: ReturnType<ST['getCurrentState']>\n  ) => [A, B, C, D, E, F, G, H, I, J, K, L]\n): [A, B, C, D, E, F, G, H, I, J, K, L];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any,\n  E = any,\n  F = any,\n  G = any,\n  H = any,\n  I = any,\n  J = any,\n  K = any,\n  L = any,\n  M = any\n>(\n  store: ST,\n  subsetProducer: (\n    state: ReturnType<ST['getCurrentState']>\n  ) => [A, B, C, D, E, F, G, H, I, J, K, L, M]\n): [A, B, C, D, E, F, G, H, I, J, K, L, M];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any,\n  E = any,\n  F = any,\n  G = any,\n  H = any,\n  I = any,\n  J = any,\n  K = any,\n  L = any,\n  M = any,\n  N = any\n>(\n  store: ST,\n  subsetProducer: (\n    state: ReturnType<ST['getCurrentState']>\n  ) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N]\n): [A, B, C, D, E, F, G, H, I, J, K, L, M, N];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any,\n  E = any,\n  F = any,\n  G = any,\n  H = any,\n  I = any,\n  J = any,\n  K = any,\n  L = any,\n  M = any,\n  N = any,\n  O = any\n>(\n  store: ST,\n  subsetProducer: (\n    state: ReturnType<ST['getCurrentState']>\n  ) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]\n): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any,\n  E = any,\n  F = any,\n  G = any,\n  H = any,\n  I = any,\n  J = any,\n  K = any,\n  L = any,\n  M = any,\n  N = any,\n  O = any,\n  P = any\n>(\n  store: ST,\n  subsetProducer: (\n    state: ReturnType<ST['getCurrentState']>\n  ) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]\n): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any,\n  E = any,\n  F = any,\n  G = any,\n  H = any,\n  I = any,\n  J = any,\n  K = any,\n  L = any,\n  M = any,\n  N = any,\n  O = any,\n  P = any,\n  Q = any\n>(\n  store: ST,\n  subsetProducer: (\n    state: ReturnType<ST['getCurrentState']>\n  ) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]\n): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any,\n  E = any,\n  F = any,\n  G = any,\n  H = any,\n  I = any,\n  J = any,\n  K = any,\n  L = any,\n  M = any,\n  N = any,\n  O = any,\n  P = any,\n  Q = any,\n  R = any\n>(\n  store: ST,\n  subsetProducer: (\n    state: ReturnType<ST['getCurrentState']>\n  ) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R]\n): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any,\n  E = any,\n  F = any,\n  G = any,\n  H = any,\n  I = any,\n  J = any,\n  K = any,\n  L = any,\n  M = any,\n  N = any,\n  O = any,\n  P = any,\n  Q = any,\n  R = any,\n  S = any\n>(\n  store: ST,\n  subsetProducer: (\n    state: ReturnType<ST['getCurrentState']>\n  ) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S]\n): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any,\n  E = any,\n  F = any,\n  G = any,\n  H = any,\n  I = any,\n  J = any,\n  K = any,\n  L = any,\n  M = any,\n  N = any,\n  O = any,\n  P = any,\n  Q = any,\n  R = any,\n  S = any,\n  T = any\n>(\n  store: ST,\n  subsetProducer: (\n    state: ReturnType<ST['getCurrentState']>\n  ) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T]\n): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any,\n  E = any,\n  F = any,\n  G = any,\n  H = any,\n  I = any,\n  J = any,\n  K = any,\n  L = any,\n  M = any,\n  N = any,\n  O = any,\n  P = any,\n  Q = any,\n  R = any,\n  S = any,\n  T = any,\n  U = any\n>(\n  store: ST,\n  subsetProducer: (\n    state: ReturnType<ST['getCurrentState']>\n  ) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U]\n): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any,\n  E = any,\n  F = any,\n  G = any,\n  H = any,\n  I = any,\n  J = any,\n  K = any,\n  L = any,\n  M = any,\n  N = any,\n  O = any,\n  P = any,\n  Q = any,\n  R = any,\n  S = any,\n  T = any,\n  U = any,\n  V = any\n>(\n  store: ST,\n  subsetProducer: (\n    state: ReturnType<ST['getCurrentState']>\n  ) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V]\n): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any,\n  E = any,\n  F = any,\n  G = any,\n  H = any,\n  I = any,\n  J = any,\n  K = any,\n  L = any,\n  M = any,\n  N = any,\n  O = any,\n  P = any,\n  Q = any,\n  R = any,\n  S = any,\n  T = any,\n  U = any,\n  V = any,\n  W = any\n>(\n  store: ST,\n  subsetProducer: (\n    state: ReturnType<ST['getCurrentState']>\n  ) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W]\n): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any,\n  E = any,\n  F = any,\n  G = any,\n  H = any,\n  I = any,\n  J = any,\n  K = any,\n  L = any,\n  M = any,\n  N = any,\n  O = any,\n  P = any,\n  Q = any,\n  R = any,\n  S = any,\n  T = any,\n  U = any,\n  V = any,\n  W = any,\n  X = any\n>(\n  store: ST,\n  subsetProducer: (\n    state: ReturnType<ST['getCurrentState']>\n  ) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X]\n): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any,\n  E = any,\n  F = any,\n  G = any,\n  H = any,\n  I = any,\n  J = any,\n  K = any,\n  L = any,\n  M = any,\n  N = any,\n  O = any,\n  P = any,\n  Q = any,\n  R = any,\n  S = any,\n  T = any,\n  U = any,\n  V = any,\n  W = any,\n  X = any,\n  Y = any\n>(\n  store: ST,\n  subsetProducer: (\n    state: ReturnType<ST['getCurrentState']>\n  ) => [\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n    Q,\n    R,\n    S,\n    T,\n    U,\n    V,\n    W,\n    X,\n    Y\n  ]\n): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y];\n\nexport function useStoreState<\n  ST extends Store<any>,\n  A = any,\n  B = any,\n  C = any,\n  D = any,\n  E = any,\n  F = any,\n  G = any,\n  H = any,\n  I = any,\n  J = any,\n  K = any,\n  L = any,\n  M = any,\n  N = any,\n  O = any,\n  P = any,\n  Q = any,\n  R = any,\n  S = any,\n  T = any,\n  U = any,\n  V = any,\n  W = any,\n  X = any,\n  Y = any,\n  Z = any\n>(\n  store: ST,\n  subsetProducer: (\n    state: ReturnType<ST['getCurrentState']>\n  ) => [\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n    Q,\n    R,\n    S,\n    T,\n    U,\n    V,\n    W,\n    X,\n    Y,\n    Z\n  ]\n): [\n  A,\n  B,\n  C,\n  D,\n  E,\n  F,\n  G,\n  H,\n  I,\n  J,\n  K,\n  L,\n  M,\n  N,\n  O,\n  P,\n  Q,\n  R,\n  S,\n  T,\n  U,\n  V,\n  W,\n  X,\n  Y,\n  Z\n];\n\nexport function useStoreState<ST extends Store<any>>(\n  store: ST,\n  subsetProducer: (state: ReturnType<ST['getCurrentState']>) => any\n): any {\n  const subsetRef = React.useRef<any[]>();\n  const [, reRender] = React.useState(0);\n  if (subsetRef.current === undefined) {\n    subsetRef.current = tryToGetSubset(store.getCurrentState(), subsetProducer);\n  }\n  if (subsetRef.current === undefined) {\n    throwSubsetPromise(store, subsetProducer);\n  }\n  React.useEffect(() => {\n    const unsub = store.subscribe(state => {\n      const newSubset = tryToGetSubset(state, subsetProducer);\n      if (\n        newSubset === undefined ||\n        subsetRef.current === undefined ||\n        newSubset.length !== subsetRef.current.length ||\n        newSubset.findIndex(v => !subsetRef.current.includes(v)) > -1\n      ) {\n        subsetRef.current = newSubset;\n        reRender(Date.now());\n      }\n    });\n    return () => {\n      unsub();\n    };\n  }, []);\n  return subsetRef.current;\n}\n\nfunction throwSubsetPromise<ST extends Store<any>>(\n  store: ST,\n  subsetProducer: (state: ReturnType<ST['getCurrentState']>) => any\n): void {\n  throw new Promise(resolve => {\n    const unsub = store.subscribe(state => {\n      if (tryToGetSubset(state, subsetProducer) !== undefined) {\n        unsub();\n        resolve();\n      }\n    });\n  });\n}\n\nfunction tryToGetSubset<State extends {}>(\n  state: State,\n  subsetProducer: (state: State) => any\n): any[] | undefined {\n  let subset: any[];\n  try {\n    subset = subsetProducer(state);\n  } catch (e) {}\n  if (subset === undefined || subset.findIndex(v => v === undefined) > -1) {\n    return undefined;\n  }\n  return subset;\n}\n","import produce, { Draft, setAutoFreeze } from 'immer';\n\nsetAutoFreeze(true);\nif (process.env.NODE_ENV !== 'production') {\n  setAutoFreeze(false);\n}\n\nexport type StateProducer<State extends {}> = (\n  draft: Draft<State | undefined>\n) => Draft<State> | void;\n\nexport type StateListener<State extends {}> = (\n  state: State | undefined\n) => void;\n\nexport type Unsubscribe = () => void;\n\nexport interface Store<State extends {}> {\n  getCurrentState(): State | undefined;\n  subscribe(listener: StateListener<State>): Unsubscribe;\n  createStoreAction<\n    Action extends (payload: any) => Promise<StateProducer<State>> = (\n      payload: any\n    ) => Promise<StateProducer<State>>\n  >(\n    action: Action\n  ): Action;\n  createStoreAction<\n    Action extends () => Promise<StateProducer<State>> = () => Promise<\n      StateProducer<State>\n    >\n  >(\n    action: Action\n  ): Action;\n}\n\nexport function createStore<State extends {}>(\n  currentState?: State\n): Store<State> {\n  const listeners: StateListener<State>[] = [];\n\n  function setState(state: State): void {\n    currentState = state;\n    [...listeners].forEach(listener => listener(currentState));\n  }\n\n  function updateState(producer: StateProducer<State>): void {\n    const newState: State = produce(currentState || {}, draft =>\n      producer(draft as Draft<State>)\n    ) as State;\n    if (newState !== currentState && Object.keys(newState).length > 0) {\n      setState(newState);\n    }\n  }\n\n  return {\n    getCurrentState: () => currentState,\n    subscribe: listener => {\n      listeners.push(listener);\n      return () => {\n        const index = listeners.indexOf(listener);\n        if (index > -1) {\n          listeners.splice(index, 1);\n        }\n      };\n    },\n    createStoreAction<\n      Action extends (payload?: any) => Promise<StateProducer<State>> = (\n        payload?: any\n      ) => Promise<StateProducer<State>>\n    >(action: Action): Action {\n      return ((payload?: any) => {\n        return action(payload).then(producer => updateState(producer));\n      }) as Action;\n    },\n  };\n}\n"],"names":["tryToGetSubset","state","subsetProducer","subset","e","undefined","findIndex","v","setAutoFreeze","currentState","listeners","getCurrentState","subscribe","listener","push","index","indexOf","splice","createStoreAction","action","payload","then","producer","newState","produce","draft","Object","keys","length","forEach","updateState","store","subsetRef","React","reRender","current","Promise","resolve","unsub","throwSubsetPromise","newSubset","includes","Date","now"],"mappings":"gHAorBA,SAASA,EACPC,EACAC,OAEIC,MAEFA,EAASD,EAAeD,GACxB,MAAOG,cACMC,IAAXF,GAAwBA,EAAOG,WAAU,SAAAC,eAAWF,IAANE,MAAoB,UAG/DJ,EC7rBTK,iBAAc,gCAmCZC,OAEMC,EAAoC,SAgBnC,CACLC,gBAAiB,kBAAMF,GACvBG,UAAW,SAAAC,UACTH,EAAUI,KAAKD,GACR,eACCE,EAAQL,EAAUM,QAAQH,GAC5BE,GAAS,GACXL,EAAUO,OAAOF,EAAO,KAI9BG,2BAIEC,UACQ,SAACC,UACAD,EAAOC,GAASC,MAAK,SAAAC,mBA1BbA,OACbC,EAAkBC,EAAQf,GAAgB,IAAI,SAAAgB,UAClDH,EAASG,MAEPF,IAAad,GAAgBiB,OAAOC,KAAKJ,GAAUK,OAAS,IARhEnB,EASWc,YARPb,GAAWmB,SAAQ,SAAAhB,UAAYA,EAASJ,OA6BAqB,CAAYR,yCD+jB1DS,EACA7B,OAEM8B,EAAYC,WACTC,EAAYD,WAAe,kBACV5B,IAAtB2B,EAAUG,UACZH,EAAUG,QAAUnC,EAAe+B,EAAMpB,kBAAmBT,SAEpCG,IAAtB2B,EAAUG,SAuBhB,SACEJ,EACA7B,SAEM,IAAIkC,SAAQ,SAAAC,OACVC,EAAQP,EAAMnB,WAAU,SAAAX,QACkBI,IAA1CL,EAAeC,EAAOC,KACxBoC,IACAD,WA9BJE,CAAmBR,EAAO7B,GAE5B+B,aAAgB,eACRK,EAAQP,EAAMnB,WAAU,SAAAX,OACtBuC,EAAYxC,EAAeC,EAAOC,SAExBG,IAAdmC,QACsBnC,IAAtB2B,EAAUG,SACVK,EAAUZ,SAAWI,EAAUG,QAAQP,QACvCY,EAAUlC,WAAU,SAAAC,UAAMyB,EAAUG,QAAQM,SAASlC,OAAO,KAE5DyB,EAAUG,QAAUK,EACpBN,EAASQ,KAAKC,kBAGX,WACLL,OAED,IACIN,EAAUG"}