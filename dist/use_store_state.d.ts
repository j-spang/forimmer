import { Store } from './store';
export declare function useStoreState<ST extends Store<any>, A = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A]): [A];
export declare function useStoreState<ST extends Store<any>, A = any, B = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B]): [A, B];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C]): [A, B, C];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D]): [A, B, C, D];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any, E = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E]): [A, B, C, D, E];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any, E = any, F = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E, F]): [A, B, C, D, E, F];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any, E = any, F = any, G = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E, F, G]): [A, B, C, D, E, F, G];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E, F, G, H]): [A, B, C, D, E, F, G, H];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E, F, G, H, I]): [A, B, C, D, E, F, G, H, I];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E, F, G, H, I, J]): [A, B, C, D, E, F, G, H, I, J];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any, K = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E, F, G, H, I, J, K]): [A, B, C, D, E, F, G, H, I, J, K];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any, K = any, L = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E, F, G, H, I, J, K, L]): [A, B, C, D, E, F, G, H, I, J, K, L];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any, K = any, L = any, M = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E, F, G, H, I, J, K, L, M]): [A, B, C, D, E, F, G, H, I, J, K, L, M];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any, K = any, L = any, M = any, N = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N]): [A, B, C, D, E, F, G, H, I, J, K, L, M, N];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any, K = any, L = any, M = any, N = any, O = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any, K = any, L = any, M = any, N = any, O = any, P = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any, K = any, L = any, M = any, N = any, O = any, P = any, Q = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any, K = any, L = any, M = any, N = any, O = any, P = any, Q = any, R = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R]): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any, K = any, L = any, M = any, N = any, O = any, P = any, Q = any, R = any, S = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S]): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any, K = any, L = any, M = any, N = any, O = any, P = any, Q = any, R = any, S = any, T = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T]): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any, K = any, L = any, M = any, N = any, O = any, P = any, Q = any, R = any, S = any, T = any, U = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U]): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any, K = any, L = any, M = any, N = any, O = any, P = any, Q = any, R = any, S = any, T = any, U = any, V = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V]): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any, K = any, L = any, M = any, N = any, O = any, P = any, Q = any, R = any, S = any, T = any, U = any, V = any, W = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W]): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any, K = any, L = any, M = any, N = any, O = any, P = any, Q = any, R = any, S = any, T = any, U = any, V = any, W = any, X = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X]): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any, K = any, L = any, M = any, N = any, O = any, P = any, Q = any, R = any, S = any, T = any, U = any, V = any, W = any, X = any, Y = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y]): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y];
export declare function useStoreState<ST extends Store<any>, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any, K = any, L = any, M = any, N = any, O = any, P = any, Q = any, R = any, S = any, T = any, U = any, V = any, W = any, X = any, Y = any, Z = any>(store: ST, subsetProducer: (state: ReturnType<ST['getCurrentState']>) => [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z]): [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z];
